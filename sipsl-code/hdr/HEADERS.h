//**********************************************************************************
//**********************************************************************************
//**********************************************************************************
// SIPSL Sip Service Layer 
// Copyright (C) 2007 Guglielmo Incisa di Camerana
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**********************************************************************************
//**********************************************************************************
//**********************************************************************************

#define HEADERS
using namespace std;

#define REGISTER_REQUEST 1
#define INVITE_REQUEST 2
#define ACK_REQUEST 3
#define BYE_REQUEST 4;
#define CANCEL_REQUEST 4;

#define TRY_RESPONSE 51
#define RINGING_RESPONSE 52
#define OK_RESPONSE 53

#define INTERNALS_METHOD 9000

//#include <pthread.h>
//#include <string>
//#include <iostream>
//#include <memory>
//#include <sys/time.h>
//#include <sys/socket.h>
//#include <arpa/inet.h>

//NEW REVISION START
//Att* are attibutes
//Head* are headers
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// tuples
//    a=b
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef struct {
    string Lvalue;
    string Rvalue;
} Tuple;
typedef map<string,string> TupleMap;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// GenericHeader "xxx: yyy<CRLF>"
//     Call-ID: 1234@gugli.gugli.it
// Virtual class
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadGeneric { //i
//NEW REVISION

    public: 
        bool isCorrect(void);
        bool isParsed(void);
        string getContent(void);

        // created using buffer and endpoint id which generates header
	HeadGeneric(string buff, int genEntity);

    protected:
        bool parsed;
        bool correct;
        
        // Id of the generating endpoint
        // same as SODE_*
        int genEntity;

        string content;
        virtual void doParse(void) = 0;

};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttGeneric
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttGeneric { //i
//NEW REVISION

    protected:
        string content;
        bool correct;
        bool parsed;
        bool isSet;

        virtual void doParse(void) = 0;

    public:
        //TODO non applicabile perche content non Ã¨ sempre sipinibile
        AttGeneric(string content);
        AttGeneric(void);

        string getContent(void);

        void setContent(string);

        bool isCorrect(void);
        bool isParsed(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Tuple Vector
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class TupleVector : public AttGeneric{ //i
//NEW REVISON
    private:
        vector<string> lval_rval;
        TupleMap tuples;
        void doParse(void);
        string separator; 
        string header;
        bool hasheader;

    public:
        TupleVector(string tuples, string separator, string header);
        TupleVector(string tuples, string separator);
        //header can be ? or whaterver the string begins with 
        string findRvalue(string Lvalue);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// AttMethod
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttMethod : public AttGeneric{ //i
//NEW REVISION

    private:
        void doParse(void);
        int methodID;
        string methodName;

    public:
        int getMethodID(void);
        string getMethodName(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttUserInfo
//    alice:secretword@
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttUserInfo : public AttGeneric{
//NEW REVISION
    private:
        void doParse(void);
        string userName;
        string password;

    public:
        string getUserName(void);
        string getPasssword(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttHostPort
//    gateway.conm:123
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttHostPort : public AttGeneric{
//NEW REVISION

    private:
        void doParse(void);
        string hostName;
        int port;

    public:
        string getHostName(void);
        int getPort(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttUriParms
//    transport=tcp;ttl=15;...
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttUriParms : public AttGeneric{
//NEW REVISION
//
    private:
        void doParse(void);
        
        TupleVector tuples;

    public:
        TupleVector getTuples(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttUriHeads
//    ?to=alice%40atalnta.com&priority=urgent&...
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttUriHeaders : public AttGeneric{
//NEW REVISION

    private:
        void doParse(void);

        TupleVector tuples;

    public:
        TupleVector getTuples(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// AttSipUri
//     "sip:alice:secretword@atlanta.com;transport=tcp"
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttSipUri : public AttGeneric{ // sip or sips
//NEW REVISION 26 12 08

    private:
        void doParse(void);

        bool isSecure; //sip or sips
        AttUserInfo userInfo; // alice:secretword@
        AttHostPort hostPort; // gateway.conm:123
        AttUriParms uriParms; // transport=tcp;ttl=15;...
        AttUriHeaders uriHeads; // ?to=alice%40atalnta.com&priority=urgent&...

     public:
        bool getIsSec(void);
        AttUserInfo getAttUserInfo(void);
        AttHostPort getAttHostPort(void);
        AttUriParms getAttUriParms(void);
        AttUriHeaders getAttUriHeads(void); 
        
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// AttRequestURI
// AttRequestURI "SIP-URI" or "SIPS-URI" or absoluteURI
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//class AttRequestUri : public AttGeneric{
//NEW REVISION
//
//    public
//        int type; //??
//        AttSipUri reqUri;
//} 
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttSipVersion
//    SIP/2.0
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttSipVersion : public AttGeneric{
//NEW REVISION 
    private:
        void doParse(void);
        int version;
        string protocol;
    public:
        string getProtocol(void);
        int getVersion();
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttVia
//   ???? based on old sipsl
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class AttVia : public AttGeneric {
//NEW REVISION

    private:
        void doParse(void);
// OLD CODE
        AttHostPort hostPort;
        TupleVector viaParms;

    public:
        AttHostPort getHostPort(void);
        TupleVector getViaParms(void);
} ;       
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadSipRequest
// HeadSipRequest "Method RequestURI SipVersion<CRLF>"
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadSipRequest : public HeadGeneric { //i
//NEW REVISION

    private:
        void doParse(void);

        AttMethod method;

        AttSipUri reqUri;
        AttSipVersion sipvs;

    public:

        AttMethod getMethod(void);
        AttSipUri getAttSipUri(void);
        AttSipVersion getSipVs(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//AttReply
//    200 OK
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class AttReply : public AttGeneric{ //i
//NEW REVISION 
    private:
        void doParse(void);
        int code;
        int replyID;
        string reply;
    public:
        int getCode(void);
        int getReplyID(void);
        string getReply(void);
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadSipReply
// HeadSipReply "SIP/2.0 200 OK"
// HeadSipReply "SIP/2.0 xxx reply"
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadSipReply : public HeadGeneric {
private:
    void doParse(void);

    AttReply reply;
    AttSipVersion sipvs;

public:

    AttReply getReply(void);
    AttSipVersion getSipVersion(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadVia
// Via: xxxxx 
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadVia : public HeadGeneric {
//NEW CODE

    private:
        void doParse(void);

        AttVia via;

    public:
        AttVia getAttVia(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadMaxFwd
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadMaxFwd : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        int mxfwd;

     public:
        int getMaxFwd(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadContact
// TODO set as AttSipUri
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadContact : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        AttSipUri contactUri;
        bool star; // "Contact: *" in register

    public:
        AttSipUri getContact(void);
        bool isStar(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadTo
// TODO set as AttSipUri
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadTo : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        AttSipUri toUri;

    public:
        AttSipUri getTo(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadFrom
// TODO set as AttSipUri
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadFrom : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        AttSipUri fromUri;

    public:
        AttSipUri getFrom(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadCallID
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadCallID : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        string callId;

    public:
        string getCallID(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadCSeq
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadCSeq : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        int sequence;
        AttMethod method;

    public:
        string getCallID(void);
        AttMethod getMethod(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadContentType
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadContentType : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        Tuple contType;

    public:
        Tuple getContentType(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// HeadContentLength
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class HeadContentLength : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        int contLength;

    public:
        int getContentLength(void);
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// SDPInfo
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class SDPInfo : public HeadGeneric {
//NEW REVISION

    private:
        void doParse(void);
        TupleVector sdp;

    public:
        TupleVector getSDP(void);
};
